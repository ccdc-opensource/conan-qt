https://trac.macports.org/ticket/63725#comment:12

UTFConversion() in chromium/base/strings/utf_string_conversions.cc requires
base::string16::shrink_to_fit(). When chromium/base/strings/string16.cc
is compiled with the macOS 12 SDK, the output object file contains
base::string16::reserve(unsigned long), but not base::string16::shrink_to_fit().
Since reserve(0) is equivalent to shrink_to_fit() for std::basic_string
in C++17 and earlier, and string16.cc is being compiled with -std=c++14,
UTFConversion() can instead use reserve(0) as a workaround.

Compile relevant files separately from jumbo build for debugging.

diff --git a/src/3rdparty/chromium/base/BUILD.gn b/src/3rdparty/chromium/base/BUILD.gn
index c15b2b2..a0c7f9e 100644
--- a/src/3rdparty/chromium/base/BUILD.gn
+++ b/src/3rdparty/chromium/base/BUILD.gn
@@ -901,6 +901,8 @@ jumbo_component("base") {
 
   jumbo_excluded_sources = [
       "logging.cc",
+      "strings/string16.cc",
+      "strings/utf_string_conversions.cc",
   ]
 
   if (is_win) {
diff --git a/src/3rdparty/chromium/base/strings/utf_string_conversions.cc b/src/3rdparty/chromium/base/strings/utf_string_conversions.cc
index 12ed1f3..a0de310 100644
--- a/src/3rdparty/chromium/base/strings/utf_string_conversions.cc
+++ b/src/3rdparty/chromium/base/strings/utf_string_conversions.cc
@@ -210,7 +210,7 @@ bool UTFConversion(const InputString& src_str, DestString* dest_str) {
   bool res = DoUTFConversion(src_str.data(), src_len32, dest, &dest_len32);
 
   dest_str->resize(dest_len32);
-  dest_str->shrink_to_fit();
+  dest_str->reserve(0);
 
   return res;
 }
